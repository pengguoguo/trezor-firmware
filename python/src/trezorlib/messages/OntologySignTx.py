# Automatically generated by pb2py
# fmt: off
from .. import protobuf as p

from .OntologyOntIdAddAttributes import OntologyOntIdAddAttributes
from .OntologyOntIdRegister import OntologyOntIdRegister
from .OntologyTransaction import OntologyTransaction
from .OntologyTransfer import OntologyTransfer
from .OntologyWithdrawOng import OntologyWithdrawOng

if __debug__:
    try:
        from typing import Dict, List, Optional
        from typing_extensions import Literal  # noqa: F401
    except ImportError:
        Dict, List, Optional = None, None, None  # type: ignore


class OntologySignTx(p.MessageType):
    MESSAGE_WIRE_TYPE = 354

    def __init__(
        self,
        address_n: List[int] = None,
        transaction: OntologyTransaction = None,
        transfer: OntologyTransfer = None,
        withdraw_ong: OntologyWithdrawOng = None,
        ont_id_register: OntologyOntIdRegister = None,
        ont_id_add_attributes: OntologyOntIdAddAttributes = None,
    ) -> None:
        self.address_n = address_n if address_n is not None else []
        self.transaction = transaction
        self.transfer = transfer
        self.withdraw_ong = withdraw_ong
        self.ont_id_register = ont_id_register
        self.ont_id_add_attributes = ont_id_add_attributes

    @classmethod
    def get_fields(cls) -> Dict:
        return {
            1: ('address_n', p.UVarintType, p.FLAG_REPEATED),
            2: ('transaction', OntologyTransaction, 0),
            3: ('transfer', OntologyTransfer, 0),
            4: ('withdraw_ong', OntologyWithdrawOng, 0),
            5: ('ont_id_register', OntologyOntIdRegister, 0),
            6: ('ont_id_add_attributes', OntologyOntIdAddAttributes, 0),
        }
